/**
 * The Client class contains the logic for communicating with the server
 */

package chat_client;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.Socket;

public class Client {

	private Socket socket;
	private BufferedReader br;
	private BufferedWriter bw;
	private String username;
	private ClientWindow window;

	/**
	 * Constructor for the Client. 
	 * @param username : username for the client.
	 * @param window : the main GUI window for the client.
	 */
	public Client(String username, ClientWindow window) {
		try {
			this.username = username;
			this.window = window;
			socket = new Socket("localhost", 1234);
			// A printwrite would be better (as is used in the ClientHandler class).
			// The BufferedWriter is only used for learning purposes.
			this.bw = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()));
			this.br = new BufferedReader(new InputStreamReader(socket.getInputStream()));
		} catch (IOException e){
			e.printStackTrace();
		}

	}

	public String getUsername() {return username;}

	/**
	 * Sends the username to the ClientHandler instance. 
	 * @param username : username of the client
	 */
	public void setUserName(String username) {
		try {
			bw.write(username);
			bw.newLine();
			bw.flush();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	/**
	 * Sends the message to the ClientHandler instance.
	 * @param msg : message to be sent.
	 */
	public void sendMsg(String msg) {
		try {
			bw.write(username + ": " + msg);
			bw.newLine();
			bw.flush();

		} catch (IOException e) {
			e.printStackTrace();
		}

	}

	/**
	 * Listens for messages from its corresponding ClientHandler instance.
	 */
	public void listenForMsg() {
		new Thread(new Runnable() {
			@Override
			public void run() {
				//String incomingMsg;

				while (socket.isConnected()) {
					try {
						String incomingMsg = br.readLine();

						window.receiveMsg(incomingMsg);

					} catch (IOException e) {
						e.printStackTrace();
						break;
					}
				}

			}

		}).start();
	}
	
	/**
	 * Close the socket on the client end.
	 */
	public void closeClient() {

		try {
			if (socket != null) {
				socket.close();	
			}
			if (br != null) {
				br.close();
			}
			if (bw != null) {
				bw.close();
			}


		} catch (IOException e) {
			e.printStackTrace();
		}
	}



}
