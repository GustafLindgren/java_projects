/**
 * ClientHandler class
 * implements runnable so instances will be executed on different threads
 */

package chat_client;

import java.util.ArrayList;
import java.net.Socket;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;

public class ClientHandler implements Runnable{
	

	// ArrayList of all ClientHandlers
	// Purpose: loop through and send message to each client
	
	public static ArrayList<ClientHandler> clientHandlers= new ArrayList<>();
	
	// Socket that is passed from the server class
	 
	private Socket socket;
	// read data that sent from the client
	private BufferedReader br;
	
	//Purpose: send message to client
	private BufferedWriter bw;
	private String username;
	
	/**
	 * Will be initiated with socket object from server class
	 * @param socket socket object from the server class
	 */
	public ClientHandler(Socket socket) {
		
		try {
			this.socket = socket;
			// convert byte stream to character stream
			// BufferedWriter improves performance by writing data in chunks instead of single bytes
			// Write data to socket
			this.bw = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()));
			// Read data to socket
			this.br = new BufferedReader(new InputStreamReader(socket.getInputStream()));
			this.username = br.readLine();
			clientHandlers.add(this);
			
			broadcastMsg("SERVER: " + username + " has entered the chat!");
		}
		catch (IOException e) {
			closeClientHandler();
		}
		
	}
	/**
	 * Sends the message to the other clients
	 * @param msg the message to be sent
	 */
	public void broadcastMsg(String msg) {
		
		for (ClientHandler clientHandler: clientHandlers) {
			try {
				if (!clientHandler.username.equals(username)) {
					// if (msg == null) throw new IOException();
					// does not get here for some reason
					clientHandler.bw.write(msg);
					// send over newLine character 
					clientHandler.bw.newLine();
					// flush fills the buffer so it can be sent (bw does not send unless full)
					clientHandler.bw.flush();
				}
			} catch (NullPointerException | IOException e){
				closeClientHandler();
			}
		}
	}
	
	public void closeClientHandler() {
		
		broadcastMsg("SERVER: " + username + " has left the chat!");
		
		try {
			if (br != null) {
				br.close();
			}
			if (bw != null) {
				bw.close();
			}
			if (socket != null) {
				socket.close();
			}
			
			clientHandlers.remove(this);
			
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	/**
	 * Listens for messages from other clients (separate thread)
	 * Blocks, thus it is on a different thread
	 */
	@Override
	public void run() {
		
		String msgFromClient;
		
		while(this.socket.isConnected()) {
			try {
				msgFromClient = br.readLine();
				broadcastMsg(msgFromClient);
				
			} catch (IOException e) {
				closeClientHandler();
				break;
			}
			
		}
		
	}

}
